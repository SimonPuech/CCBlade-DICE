name: CI_CCBlade

# We run CI on push commits and pull requests on all branches
on: [push, pull_request]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
    build_pip:
        name: Pip Build (${{ matrix.os }}) - ${{ matrix.python-version }}
        runs-on: ${{ matrix.os }}
        defaults:
            run:
                shell: bash -l {0}
                
        strategy:
            fail-fast: false #true
            matrix:
                os: ["ubuntu-latest", "macOS-latest", "windows-latest"]
                python-version: ["3.9", "3.10", "3.11"]

        steps:
            - name: Setup GNU Fortran
            #  if: false == contains( matrix.os, 'windows')
              uses: awvwgk/setup-fortran@v1 #modflowpy/install-intelfortran-action@v1 #
              
            - name: checkout repository
              uses: actions/checkout@v4

            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v4
              id: cp
              with:
                  python-version: ${{ matrix.python-version }}
                  update-environment: true
                  
            #- name: Setup tmate session
            #  if: contains( matrix.os, 'windows')
            #  uses: mxschmitt/action-tmate@v3
              
            - name: Pip Install CCBlade
              env:
                  MESON_ARGS: -Dpython_target=${{ steps.cp.outputs.python-path }}
              run: |
                  '${{ steps.cp.outputs.python-path }}' -m pip install -v -e .[test]

            - name: Test run
              run: |
                  cd test
                  '${{ steps.cp.outputs.python-path }}' -m pytest .


    build_conda:
        name: Conda Build (${{ matrix.os }}) - ${{ matrix.python-version }}
        runs-on: ${{ matrix.os }}
        defaults:
            run:
                shell: bash -el {0}
                
        strategy:
            fail-fast: false #true
            matrix:
                os: ["ubuntu-latest", "macOS-latest", "windows-latest"]
                python-version: ["3.9", "3.10", "3.11"]

        steps:
            - name: checkout repository
              uses: actions/checkout@v4

            - uses: conda-incubator/setup-miniconda@v2
              # https://github.com/marketplace/actions/setup-miniconda
              with:
                  #mamba-version: "*"
                  miniforge-version: "latest"
                  auto-update-conda: true
                  python-version: ${{ matrix.python-version }}
                  environment-file: environment.yml
                  activate-environment: test
                  auto-activate-base: false

            - name: Add dependencies windows specific
              if: contains( matrix.os, 'windows')
              run: |
                  conda install -y m2w64-toolchain libpython
                  
            - name: Add dependencies mac specific
              if: contains( matrix.os, 'mac')
              run: |
                  conda install -y compilers
                  gfortran --version

            # Install 
            - name: Debug
              run: |
                  conda list
                  printenv

            #- name: Setup tmate session
            #  uses: mxschmitt/action-tmate@v3
            #  with:
            #      detached: true
            #  if: contains( matrix.os, 'windows')
                    
            # Install 
            - name: Conda Install CCBlade
              env:
                  MESON_ARGS: ""
              run: |
                  python setup.py develop

            - name: Test run
              run: |
                  cd test
                  pytest .

# adding a test to see if the installation via pip works

    build_venv:
      name: venv Build (${{ matrix.os }}) - ${{ matrix.python-version }}
      runs-on: ${{ matrix.os }}
      defaults:
          run:
              shell: bash -el {0}
              
      strategy:
          fail-fast: false #true
          matrix:
              os: ["ubuntu-latest", "macOS-latest", "windows-latest"]
              python-version: ["3.9", "3.10", "3.11"]

      steps:
          - name: checkout repository
            uses: actions/checkout@v4

          - uses: actions/setup-python@v5
            with:
                python-version: ${{ matrix.python-version }}

          - name: Add dependencies windows specific
            if: contains( matrix.os, 'windows')
            run: |
                pip install -y m2w64-toolchain libpython
                
          - name: Add dependencies mac specific
            if: contains( matrix.os, 'mac')
            run: |
                pip install -y compilers
                gfortran --version

          # Install 
          - name: Debug
            run: |
                pip list
                printenv

          #- name: Setup tmate session
          #  uses: mxschmitt/action-tmate@v3
          #  with:
          #      detached: true
          #  if: contains( matrix.os, 'windows')
                  
          # Install 
          - name: Pip Install CCBlade
            env:
                MESON_ARGS: ""
            run: |
                python -m venv venv
                source venv/bin/activate && python setup.py develop                python setup.py develop

          - name: Test run
            run: |
                cd test
                source ./../venv/bin/activate && pytest .
    
    tmp_build_venv_310:
        name: tmp build venv 3.10
        runs-on: ubuntu-latest
        steps:
            - name: checkout repository
              uses: actions/checkout@v4

            - uses: actions/setup-python@v4
              with:
                  python-version: 3.10

            - name: Pip Install CCBlade
              run: |
                  python -m venv venv
                  source venv/bin/activate && pip install .[test]
            - name: Test run
              run: |
                  cd test
                  source ./../venv/bin/activate && pytest .